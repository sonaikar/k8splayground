# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANT_BOX="ubuntu/groovy64"
VM_NAME = 'dockervm'
VM_USER = 'vagrant'
MAC_USER = 'sonaikar'
# HOST_PATH = '/Users/sonaikar/Documents/Devops/devopsnov2020'
# GUEST_PATH = '/opt/my-project'
VM_PORT = 8080
# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = VAGRANT_BOX
  config.vm.hostname = VM_NAME
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
#   config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"
  config.vm.network "public_network", bridge: "en0: Wi-Fi (AirPort)"
#   config.vm.network "public_network", ip: "10.0.0.100"
#   config.vm.network "public_network", auto_config: false

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
#   config.vm.synced_folder HOST_PATH, GUEST_PATH
#   config.vm.synced_folder '.', '/home/'+VM_USER+'', disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = "4096"
     vb.name = VM_NAME
     vb.cpus = 2
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

# Manual IP
    #config.vm.provision "shell",
    #run: "always",
    #inline: "ifconfig enp0s8 10.0.0.100 netmask 255.255.255.0 up"


  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision "shell", inline: <<-SHELL
        apt-get update -y
        apt-get install -y git
        apt-get install -y apt-transport-https
        apt-get install -y build-essential
        apt-get install -y curl
        apt-get install -y gnupg-agent
        apt-get install -y software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        apt-key fingerprint 0EBFCD88
        add-apt-repository \
           "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
           $(lsb_release -cs) \
           stable"
        apt-get update -y
        apt-get install -y docker-ce docker-ce-cli containerd.io
        curl -L "https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
        rm -f /usr/bin/docker-compose
        ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
   SHELL
end
